[
  {"question":"Create a table 'Students' with columns 'id' (Primary Key AutoIncrement), 'name', 'age'.","answer":"CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);"},
  {"question":"Create a table 'Courses' with 'course_id' (Primary Key), 'course_name', 'credits'.","answer":"CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY,\n  course_name TEXT,\n  credits INTEGER\n);"},
  {"question":"Create a junction table 'Enrollments' to model many-to-many relationship between 'Students' and 'Courses', with 'enrollment_id' (Primary Key AutoIncrement), 'student_id' (Foreign Key), 'course_id' (Foreign Key).","answer":"CREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER,\n  FOREIGN KEY(student_id) REFERENCES Students(id),\n  FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);"},
  {"question":"Create a table 'Authors' with 'author_id' (Primary Key AutoIncrement) and 'name'.","answer":"CREATE TABLE Authors (\n  author_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT\n);"},
  {"question":"Create a table 'Books' with 'book_id' (Primary Key AutoIncrement) and 'title'.","answer":"CREATE TABLE Books (\n  book_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title TEXT\n);"},
  {"question":"Create a junction table 'BookAuthors' for many-to-many relationship between 'Books' and 'Authors', including 'book_id' and 'author_id' as foreign keys and a primary key 'id'.","answer":"CREATE TABLE BookAuthors (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  book_id INTEGER,\n  author_id INTEGER,\n  FOREIGN KEY(book_id) REFERENCES Books(book_id),\n  FOREIGN KEY(author_id) REFERENCES Authors(author_id)\n);"},
  {"question":"Insert a new student named 'Alice', age 19, into 'Students'.","answer":"INSERT INTO Students (name, age) VALUES ('Alice', 19);"},
  {"question":"Insert a new course 'Math' with 3 credits into 'Courses'.","answer":"INSERT INTO Courses (course_name, credits) VALUES ('Math', 3);"},
  {"question":"Enroll student 'Alice' in course 'Math'.","answer":"INSERT INTO Enrollments (student_id, course_id) VALUES (1, 1);"},
  {"question":"Update student 'Alice' age to 20.","answer":"UPDATE Students SET age = 20 WHERE name = 'Alice';"},
  {"question":"Select all columns from 'Students'.","answer":"SELECT * FROM Students;"},
  {"question":"Select all students aged 18, 19, or 20.","answer":"SELECT * FROM Students WHERE age IN (18, 19, 20);"},
  {"question":"Select all students ordered by name ascending.","answer":"SELECT * FROM Students ORDER BY name ASC;"},
  {"question":"Select all courses ordered by credits descending.","answer":"SELECT * FROM Courses ORDER BY credits DESC;"},
  {"question":"Count the number of students in each course.","answer":"SELECT course_id, COUNT(student_id) FROM Enrollments GROUP BY course_id;"},
  {"question":"Select student names and their enrolled course names using INNER JOIN.","answer":"SELECT Students.name, Courses.course_name FROM Enrollments\nINNER JOIN Students ON Enrollments.student_id = Students.id\nINNER JOIN Courses ON Enrollments.course_id = Courses.course_id;"},
  {"question":"Add a CHECK constraint to 'Students' to ensure age is greater than 0.","answer":"CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER CHECK(age > 0)\n);"},
  {"question":"Update course 'Math' credits to 4.","answer":"UPDATE Courses SET credits = 4 WHERE course_name = 'Math';"},
  {"question":"Select students and courses where credits are greater than 3 using INNER JOIN.","answer":"SELECT Students.name, Courses.course_name FROM Enrollments\nINNER JOIN Students ON Enrollments.student_id = Students.id\nINNER JOIN Courses ON Enrollments.course_id = Courses.course_id\nWHERE Courses.credits > 3;"},
  {"question":"Insert multiple students into 'Students'.","answer":"INSERT INTO Students (name, age) VALUES ('Bob', 18), ('Charlie', 20), ('Diana', 19);"},
  {"question":"Select students whose name starts with 'A'.","answer":"SELECT * FROM Students WHERE name LIKE 'A%';"},
  {"question":"Select all courses with 3 or more credits.","answer":"SELECT * FROM Courses WHERE credits >= 3;"},
  {"question":"Update student 'Bob' age to 19.","answer":"UPDATE Students SET age = 19 WHERE name = 'Bob';"},
  {"question":"Select students and the number of courses they are enrolled in.","answer":"SELECT Students.name, COUNT(Enrollments.course_id) FROM Students\nINNER JOIN Enrollments ON Students.id = Enrollments.student_id\nGROUP BY Students.name;"},
  {"question":"Delete student 'Diana' from 'Students'.","answer":"DELETE FROM Students WHERE name = 'Diana';"},
  {"question":"Select all students not enrolled in any course.","answer":"SELECT * FROM Students WHERE id NOT IN (SELECT student_id FROM Enrollments);"},
  {"question":"Create table 'Teachers' with 'teacher_id' (Primary Key AutoIncrement) and 'name'.","answer":"CREATE TABLE Teachers (\n  teacher_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT\n);"},
  {"question":"Add a foreign key 'teacher_id' in 'Courses' referencing 'Teachers'.","answer":"ALTER TABLE Courses ADD COLUMN teacher_id INTEGER;\nALTER TABLE Courses ADD FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id);"},
  {"question":"Select all students and their teacher names using INNER JOIN.","answer":"SELECT Students.name, Teachers.name FROM Enrollments\nINNER JOIN Students ON Enrollments.student_id = Students.id\nINNER JOIN Courses ON Enrollments.course_id = Courses.course_id\nINNER JOIN Teachers ON Courses.teacher_id = Teachers.teacher_id;"},
  {"question":"Select courses with more than 1 student enrolled.","answer":"SELECT Courses.course_name, COUNT(Enrollments.student_id) FROM Courses\nINNER JOIN Enrollments ON Courses.course_id = Enrollments.course_id\nGROUP BY Courses.course_name\nHAVING COUNT(Enrollments.student_id) > 1;"},
  {"question":"Select the oldest student.","answer":"SELECT * FROM Students ORDER BY age DESC LIMIT 1;"},
  {"question":"Select courses with no students enrolled.","answer":"SELECT * FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Enrollments);"},
  {"question":"Update course 'Math' to have teacher 'Mr. Smith'.","answer":"UPDATE Courses SET teacher_id = 1 WHERE course_name = 'Math';"},
  {"question":"Create a junction table 'StudentClubs' linking 'Students' and 'Clubs' for many-to-many relationship.","answer":"CREATE TABLE StudentClubs (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  club_id INTEGER,\n  FOREIGN KEY(student_id) REFERENCES Students(id),\n  FOREIGN KEY(club_id) REFERENCES Clubs(club_id)\n);"}
]
