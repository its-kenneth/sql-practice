[
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);",
    "prompt": "Insert a new student 'Alice', age 19, into the Students table.",
    "answer": "INSERT INTO Students (name, age) VALUES ('Alice', 19);"
  },
  {
    "context": "CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);",
    "prompt": "Insert a new course 'Math' with 3 credits into the Courses table.",
    "answer": "INSERT INTO Courses (course_name, credits) VALUES ('Math', 3);"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nCREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER,\n  FOREIGN KEY(student_id) REFERENCES Students(id),\n  FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19),('Bob',20);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);\nINSERT INTO Enrollments (student_id, course_id) VALUES (1,1);",
    "prompt": "Select all students not enrolled in any course.",
    "answer": "SELECT * FROM Students WHERE id NOT IN (SELECT student_id FROM Enrollments);"
  },
  {
    "context": "CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nCREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER\n);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);\nINSERT INTO Enrollments (student_id, course_id) VALUES (1,1);",
    "prompt": "Select all courses with no students enrolled.",
    "answer": "SELECT * FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Enrollments);"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);",
    "prompt": "Update student 'Alice' age to 20.",
    "answer": "UPDATE Students SET age = 20 WHERE name = 'Alice';"
  },
  {
    "context": "CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);",
    "prompt": "Update course 'Math' credits to 4.",
    "answer": "UPDATE Courses SET credits = 4 WHERE course_name = 'Math';"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nCREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER,\n  FOREIGN KEY(student_id) REFERENCES Students(id),\n  FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19),('Bob',18);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);\nINSERT INTO Enrollments (student_id, course_id) VALUES (1,1);",
    "prompt": "Select student names and their enrolled course names using INNER JOIN.",
    "answer": "SELECT Students.name, Courses.course_name FROM Enrollments INNER JOIN Students ON Enrollments.student_id = Students.id INNER JOIN Courses ON Enrollments.course_id = Courses.course_id;"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER CHECK(age > 0)\n);",
    "prompt": "Try inserting a student with age -5 and observe what happens.",
    "answer": "INSERT INTO Students (name, age) VALUES ('Test', -5); -- fails due to CHECK constraint"
  },
  {
    "context": "CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);",
    "prompt": "Select all courses ordered by credits descending.",
    "answer": "SELECT * FROM Courses ORDER BY credits DESC;"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);",
    "prompt": "Select all students whose age is in 18, 19, or 20.",
    "answer": "SELECT * FROM Students WHERE age IN (18, 19, 20);"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nCREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER,\n  FOREIGN KEY(student_id) REFERENCES Students(id),\n  FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19),('Bob',18),('Charlie',20);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);\nINSERT INTO Enrollments (student_id, course_id) VALUES (1,1),(2,2);",
    "prompt": "Count the number of students in each course.",
    "answer": "SELECT course_id, COUNT(student_id) FROM Enrollments GROUP BY course_id;"
  },
  {
    "context": "CREATE TABLE Teachers (\n  teacher_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT\n);\nCREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER,\n  teacher_id INTEGER,\n  FOREIGN KEY(teacher_id) REFERENCES Teachers(teacher_id)\n);\nINSERT INTO Teachers (name) VALUES ('Mr. Smith');\nINSERT INTO Courses (course_name, credits, teacher_id) VALUES ('Math',3,1);",
    "prompt": "Select all courses along with their teacher's name using INNER JOIN.",
    "answer": "SELECT Courses.course_name, Teachers.name FROM Courses INNER JOIN Teachers ON Courses.teacher_id = Teachers.teacher_id;"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Clubs (\n  club_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  club_name TEXT\n);\nCREATE TABLE StudentClubs (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  club_id INTEGER,\n  FOREIGN KEY(student_id) REFERENCES Students(id),\n  FOREIGN KEY(club_id) REFERENCES Clubs(club_id)\n);",
    "prompt": "Enroll student 'Alice' into club 'Chess Club'.",
    "answer": "INSERT INTO StudentClubs (student_id, club_id) VALUES (1,1);"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);",
    "prompt": "Delete student 'Bob' from Students table.",
    "answer": "DELETE FROM Students WHERE name = 'Bob';"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19),('Bob',20);\nINSERT INTO Enrollments (student_id, course_id) VALUES (1,1);",
    "prompt": "Select all students who are enrolled in at least one course.",
    "answer": "SELECT * FROM Students WHERE id IN (SELECT student_id FROM Enrollments);"
  },
  {
    "context": "CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);",
    "prompt": "Select the course with the highest credits.",
    "answer": "SELECT * FROM Courses ORDER BY credits DESC LIMIT 1;"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19),('Bob',20),('Charlie',18);",
    "prompt": "Select all students ordered by age ascending.",
    "answer": "SELECT * FROM Students ORDER BY age ASC;"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);",
    "prompt": "Select all students whose name starts with 'A'.",
    "answer": "SELECT * FROM Students WHERE name LIKE 'A%';"
  },
  {
    "context": "CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);",
    "prompt": "Select all courses with credits >= 3.",
    "answer": "SELECT * FROM Courses WHERE credits >= 3;"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nCREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19),('Bob',18);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);\nINSERT INTO Enrollments (student_id, course_id) VALUES (1,1),(2,2);",
    "prompt": "Select students and the number of courses they are enrolled in.",
    "answer": "SELECT Students.name, COUNT(Enrollments.course_id) FROM Students INNER JOIN Enrollments ON Students.id = Enrollments.student_id GROUP BY Students.name;"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19),('Bob',20);",
    "prompt": "Select the oldest student.",
    "answer": "SELECT * FROM Students ORDER BY age DESC LIMIT 1;"
  },
  {
    "context": "CREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER\n);\nCREATE TABLE Enrollments (\n  enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  course_id INTEGER\n);\nINSERT INTO Courses (course_name, credits) VALUES ('Math',3),('Science',4);",
    "prompt": "Select courses with no students enrolled.",
    "answer": "SELECT * FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Enrollments);"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Teachers (\n  teacher_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT\n);\nCREATE TABLE Courses (\n  course_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  course_name TEXT,\n  credits INTEGER,\n  teacher_id INTEGER,\n  FOREIGN KEY(teacher_id) REFERENCES Teachers(teacher_id)\n);\nINSERT INTO Teachers (name) VALUES ('Mr. Smith');\nINSERT INTO Courses (course_name, credits, teacher_id) VALUES ('Math',3,1);",
    "prompt": "Update course 'Math' to have teacher 'Mr. Smith'.",
    "answer": "UPDATE Courses SET teacher_id = 1 WHERE course_name = 'Math';"
  },
  {
    "context": "CREATE TABLE Books (\n  book_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title TEXT\n);\nCREATE TABLE Authors (\n  author_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT\n);\nCREATE TABLE BookAuthors (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  book_id INTEGER,\n  author_id INTEGER,\n  FOREIGN KEY(book_id) REFERENCES Books(book_id),\n  FOREIGN KEY(author_id) REFERENCES Authors(author_id)\n);\nINSERT INTO Books (title) VALUES ('Book A');\nINSERT INTO Authors (name) VALUES ('Author X');",
    "prompt": "Link 'Book A' to 'Author X' in the BookAuthors junction table.",
    "answer": "INSERT INTO BookAuthors (book_id, author_id) VALUES (1,1);"
  },
  {
    "context": "CREATE TABLE Students (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT,\n  age INTEGER\n);\nCREATE TABLE Clubs (\n  club_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  club_name TEXT\n);\nCREATE TABLE StudentClubs (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  student_id INTEGER,\n  club_id INTEGER,\n  FOREIGN KEY(student_id) REFERENCES Students(id),\n  FOREIGN KEY(club_id) REFERENCES Clubs(club_id)\n);\nINSERT INTO Students (name, age) VALUES ('Alice',19);\nINSERT INTO Clubs (club_name) VALUES ('Chess Club');",
    "prompt": "Select all students and the clubs they are enrolled in using INNER JOIN.",
    "answer": "SELECT Students.name, Clubs.club_name FROM StudentClubs INNER JOIN Students ON StudentClubs.student_id = Students.id INNER JOIN Clubs ON StudentClubs.club_id = Clubs.club_id;"
  }
]
